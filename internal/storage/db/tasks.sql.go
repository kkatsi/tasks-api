// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tasks.sql

package db

import (
	"context"
	"time"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (id, title, description, completed, created_at, updated_at, user_id)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, title, description, completed, created_at, updated_at, user_id
`

type CreateTaskParams struct {
	ID          string
	Title       string
	Description string
	Completed   bool
	CreatedAt   time.Time
	UpdatedAt   time.Time
	UserID      string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createTask,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM tasks WHERE id = ? AND user_id = ?
RETURNING id
`

type DeleteTaskParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteTask, arg.ID, arg.UserID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, completed, created_at, updated_at, user_id FROM tasks WHERE id = ? AND user_id = ?
`

type GetTaskParams struct {
	ID     string
	UserID string
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, title, description, completed, created_at, updated_at, user_id FROM tasks WHERE user_id = ? ORDER BY tasks.created_at DESC LIMIT ? OFFSET ?
`

type GetTasksParams struct {
	UserID string
	Limit  int64
	Offset int64
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Completed,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET title = ?, description = ?, completed = ?, updated_at = ?
WHERE id = ? AND user_id = ?
RETURNING id, title, description, completed, created_at, updated_at, user_id
`

type UpdateTaskParams struct {
	Title       string
	Description string
	Completed   bool
	UpdatedAt   time.Time
	ID          string
	UserID      string
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.Completed,
		arg.UpdatedAt,
		arg.ID,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Completed,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
	)
	return i, err
}
